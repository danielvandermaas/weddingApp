{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Projecten/weddingApp/src/components/SubmitMessage.js\";\nimport React, { Component } from 'react';\n\nclass SubmitMessage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      'bericht': '',\n      'image': ''\n    };\n\n    this.setName = e => {\n      this.setState({\n        bericht: e.target.value\n      });\n    };\n\n    this.sent = async e => {\n      let form = {\n        'formName': 'chat',\n        'answers': [{\n          'type': 'text',\n          'question': 'Naam',\n          'answer': this.props.name\n        }, {\n          'type': 'text',\n          'question': 'Bericht',\n          'answer': this.state.bericht\n        }]\n      };\n      this.setState({\n        bericht: ''\n      });\n      let polygonId;\n\n      if (this.props.type === 'chat') {\n        polygonId = 16;\n      } else {\n        polygonId = 14;\n      }\n\n      let res = await fetch('https://api.ellipsis-earth.com/v2/geomessage/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.props.token\n        },\n        body: JSON.stringify({\n          'mapId': this.props.mapId,\n          'timestamp': 0,\n          'type': 'polygon',\n          'elementId': polygonId,\n          'form': form\n        })\n      });\n      this.props.getFeed();\n    };\n\n    this.upload = evt => {\n      console.log(\"Uploading\");\n      var reader = new FileReader();\n      var file = evt.target.files[0];\n      console.log(file);\n\n      reader.onload = function (upload) {\n        this.setState({\n          image: upload.target.result\n        });\n      };\n\n      reader.readAsDataURL(file);\n      console.log(this.state.image);\n      console.log(\"Uploaded\"); //this.setState({image:e.target.value})\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 3\n      }\n    }, \" Stuur bericht \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"wachtwoord\",\n      placeholder: \"Type een berichtje.\",\n      value: this.state.bericht,\n      onChange: this.setName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      id: \"img\",\n      name: \"img\",\n      accept: \".jpg, .jpeg, .png, .JPG, .JPEG, .PNG\",\n      onChange: this.upload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"stuur!\",\n      onClick: this.sent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 4\n      }\n    }));\n  }\n\n}\n\nexport default SubmitMessage;","map":{"version":3,"sources":["/home/daniel/Projecten/weddingApp/src/components/SubmitMessage.js"],"names":["React","Component","SubmitMessage","state","setName","e","setState","bericht","target","value","sent","form","props","name","polygonId","type","res","fetch","method","headers","token","body","JSON","stringify","mapId","getFeed","upload","evt","console","log","reader","FileReader","file","files","onload","image","result","readAsDataURL","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nclass SubmitMessage extends Component {\n\nstate = {'bericht':'', 'image':''}\n\nsetName = (e)=>{\n  this.setState({bericht:e.target.value})\n}\n\nsent = async (e)=>{\n  let form = {'formName':'chat' , 'answers':[{'type':'text','question':'Naam', 'answer':this.props.name},{'type':'text', 'question':'Bericht', 'answer':this.state.bericht}]}\n  this.setState({bericht:''})\n  let polygonId\n  if(this.props.type ==='chat'){\n    polygonId = 16\n}else{\n  polygonId = 14\n}\n  let res = await fetch('https://api.ellipsis-earth.com/v2/geomessage/add',{method:'POST',  headers: {'Content-Type': 'application/json', 'Authorization': this.props.token}, body:JSON.stringify({'mapId':this.props.mapId, 'timestamp': 0, 'type':'polygon', 'elementId':polygonId, 'form':form })})\n  this.props.getFeed()\n\n}\n\nupload = (evt) =>{\nconsole.log(\"Uploading\")\nvar reader = new FileReader()\nvar file = evt.target.files[0]\nconsole.log(file)\nreader.onload = function(upload) {\n    this.setState({\n        image: upload.target.result\n    });\n};\nreader.readAsDataURL(file)\nconsole.log(this.state.image)\nconsole.log(\"Uploaded\")\n\n  //this.setState({image:e.target.value})\n\n}\n\nrender(){  return (\n  <div>\n  <h3> Stuur bericht </h3>\n  <input type = \"text\" name = \"wachtwoord\" placeholder = \"Type een berichtje.\" value = {this.state.bericht} onChange = {this.setName}/>\n  <input type=\"file\" id=\"img\" name=\"img\" accept=\".jpg, .jpeg, .png, .JPG, .JPEG, .PNG\" onChange = {this.upload}/>\n   <input type=\"button\" value= \"stuur!\" onClick = {this.sent} />\n  </div>\n\n  );\n}\n}\nexport default SubmitMessage;\n"]},"metadata":{},"sourceType":"module"}