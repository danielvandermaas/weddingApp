{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Projecten/weddingApp/src/components/Chat.js\";\nimport React, { Component } from 'react';\nimport SubmitMessage from './SubmitMessage';\n\nclass Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      'time': 2,\n      'messages': [{\n        'form': {\n          'answers': [{\n            'anwser': ''\n          }, {\n            'anwser': ''\n          }]\n        }\n      }]\n    };\n\n    this.getFeed = async () => {\n      let messageInfo = await fetch('https://api.ellipsis-earth.com/v2/geomessage/ids', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.props.token\n        },\n        body: JSON.stringify({\n          'mapId': this.props.mapId,\n          'type': 'polygon',\n          'limit': 30,\n          'filters': {\n            'polygonIds': [16]\n          }\n        })\n      });\n      messageInfo = await messageInfo.json();\n      let messageIds = messageInfo.messages.map(x => {\n        return x.id;\n      });\n      let messages = await fetch('https://api.ellipsis-earth.com/v2/geomessage/get', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.props.token\n        },\n        body: JSON.stringify({\n          'mapId': this.props.mapId,\n          'type': 'polygon',\n          'messageIds': messageIds\n        })\n      });\n      messages = await messages.json();\n      this.setState({\n        messages: messages\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getFeed();\n    setInterval(this.getFeed, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }, \" Chat \"), /*#__PURE__*/React.createElement(SubmitMessage, {\n      mapId: this.props.mapId,\n      token: this.props.token,\n      getFeed: this.props.getFeed(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, this.state.messages.map(function (message, index) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }\n      }, \" \", message.form.answers[0].answer), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }\n      }, message.form.answers[1].answer), /*#__PURE__*/React.createElement(\"img\", {\n        src: message.thumbnail,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      })));\n    })));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/daniel/Projecten/weddingApp/src/components/Chat.js"],"names":["React","Component","SubmitMessage","Chat","state","getFeed","messageInfo","fetch","method","headers","props","token","body","JSON","stringify","mapId","json","messageIds","messages","map","x","id","setState","componentDidMount","setInterval","componentWillUnmount","clearInterval","interval","render","message","index","form","answers","answer","thumbnail"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport SubmitMessage from './SubmitMessage'\n\nclass Chat extends Component {\n\nstate = {'time':2, 'messages':[{'form': {'answers':[{'anwser':''}, {'anwser':''}]} }]}\n\ncomponentDidMount() {\n  this.getFeed()\n  setInterval(this.getFeed, 5000);\n\n}\ncomponentWillUnmount() {\n  clearInterval(this.interval);\n}\n\n\ngetFeed = async () =>{\n    let messageInfo = await fetch('https://api.ellipsis-earth.com/v2/geomessage/ids',{method:'POST',  headers: {'Content-Type': 'application/json', 'Authorization': this.props.token}, body:JSON.stringify({'mapId':this.props.mapId, 'type': 'polygon', 'limit':30, 'filters':{ 'polygonIds':[16]}})});\n    messageInfo = await messageInfo.json();\n    let messageIds = messageInfo.messages.map((x) =>{return(x.id)})\n    let messages = await fetch('https://api.ellipsis-earth.com/v2/geomessage/get',{method:'POST',  headers: {'Content-Type': 'application/json', 'Authorization': this.props.token}, body:JSON.stringify({'mapId':this.props.mapId, 'type': 'polygon', 'messageIds': messageIds })})\n    messages = await messages.json()\n    this.setState({messages:messages})\n  }\n\n\nrender(){\n  return (\n    <div>\n    <h1> Chat </h1>\n    <SubmitMessage mapId = {this.props.mapId} token = {this.props.token} getFeed = {this.props.getFeed()}/>\n    <ul>{\n    this.state.messages.map(function(message, index){\n        return(\n          <div>\n          <li>\n                <p> {message.form.answers[0].answer}</p>\n                <p>{message.form.answers[1].answer}</p>\n                <img src = {message.thumbnail}/>\n                </li>\n            </div>\n        )\n      })\n    }</ul>\n    </div>\n  );\n}\n}\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}