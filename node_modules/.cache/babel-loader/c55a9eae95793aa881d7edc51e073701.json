{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Projecten/weddingApp/src/components/Tuin.js\";\nimport React, { Component } from 'react';\nimport { Map, TileLayer, Pane, Marker, Popup, Circle, GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nclass Tuin extends Component {\n  constructor(props) {\n    super(props);\n    this.leafletMap = null;\n\n    this.showPhoto = async imageId => {\n      this.props.addOnScreen('foto');\n      this.props.setImageId(imageId);\n    };\n\n    this.openWindow = url => {\n      console.log(url);\n      var win = window.open('https://' + url, '_blank');\n      win.focus();\n    };\n\n    this.getMarkers = async layer => {\n      let body = {\n        'mapId': this.props.mapId,\n        'layer': layer,\n        'type': 'polygon'\n      };\n      let ids = await fetch('https://api.ellipsis-earth.com/v2/geometry/ids', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.props.token\n        },\n        body: JSON.stringify(body)\n      });\n      ids = await ids.json();\n      ids = ids.ids;\n      body = {\n        'mapId': this.props.mapId,\n        'elementIds': ids,\n        'type': 'polygon'\n      };\n      let geojson = await fetch('https://api.ellipsis-earth.com/v2/geometry/get', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.props.token\n        },\n        body: JSON.stringify(body)\n      });\n      geojson = await geojson.json();\n      let geoJsonElements = geojson.features.map(feature => {\n        let position = feature.geometry.coordinates;\n        position.reverse();\n        return /*#__PURE__*/React.createElement(Marker, {\n          map: this.refs.map,\n          position: position,\n          onClick: this.openWindow.bind(this, feature.properties.link),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(Popup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 10\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 12\n          }\n        }, layer)));\n        this.setState({\n          ceremonie: geoJsonElements\n        });\n      });\n\n      if (layer == 'ceremonie') {\n        this.setState({\n          ceremonie: geoJsonElements\n        });\n      }\n\n      if (layer == 'ontvangst') {\n        this.setState({\n          ontvangst: geoJsonElements\n        });\n      }\n\n      if (layer == 'receptie') {\n        this.setState({\n          receptie: geoJsonElements\n        });\n      }\n    };\n\n    this.flyToPos = async pos => {\n      let leafletElement = this.leafletMap.current.leafletElement;\n      leafletElement.flyTo(pos.coords, pos.zoom, {\n        'duration': 6\n      });\n    };\n\n    this.checkState = () => {\n      console.log('hoi');\n    };\n\n    this.leafletMap = React.createRef();\n    this.state = {\n      'ceremonie': [],\n      'ontvangst': [],\n      'receptie': [],\n      'position': {\n        'coords': [51.98126, 5.82501],\n        'zoom': 18\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.flyToPos(this.state.position);\n    this.getMarkers('ceremonie');\n    this.getMarkers('ontvangst');\n    this.getMarkers('receptie');\n  }\n\n  componentWillUnmount() {\n    this.props.setPosition(this.state.position);\n  }\n\n  render() {\n    let fullStyle = {\n      height: '1000px',\n      width: '1000px'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: fullStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      value: \"check state\",\n      onClick: this.checkState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Map, {\n      center: this.props.position.coords,\n      zoom: this.props.position.zoom,\n      style: fullStyle,\n      ref: this.leafletMap,\n      maxNativeZoom: 21,\n      maxZoom: 21,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Pane, {\n      style: {\n        'zIndex': 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      url: \"https://www.google.com/maps/vt?lyrs=y@189&x={x}&y={y}&z={z}\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(Pane, {\n      style: {\n        'zIndex': 150\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      url: 'https://api.ellipsis-earth.com/v2/tileService/dd3cee74-98ec-4fd6-bd7a-7fdd3bb409d1/3/rgb/{z}/{x}/{y}?token=' + this.props.token.substring(7, this.props.token.length),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Pane, {\n      style: {\n        zIndex: 200\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, this.state.ceremonie, this.state.ontvangst, this.state.receptie)));\n  }\n\n}\n\n;\nexport default Tuin;","map":{"version":3,"sources":["/home/daniel/Projecten/weddingApp/src/components/Tuin.js"],"names":["React","Component","Map","TileLayer","Pane","Marker","Popup","Circle","GeoJSON","L","Tuin","constructor","props","leafletMap","showPhoto","imageId","addOnScreen","setImageId","openWindow","url","console","log","win","window","open","focus","getMarkers","layer","body","mapId","ids","fetch","method","headers","token","JSON","stringify","json","geojson","geoJsonElements","features","map","feature","position","geometry","coordinates","reverse","refs","bind","properties","link","setState","ceremonie","ontvangst","receptie","flyToPos","pos","leafletElement","current","flyTo","coords","zoom","checkState","createRef","state","componentDidMount","componentWillUnmount","setPosition","render","fullStyle","height","width","substring","length","zIndex"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {\n  Map,\n  TileLayer,\n  Pane,\n  Marker,\n  Popup,\n  Circle,\n  GeoJSON\n} from 'react-leaflet';\nimport L from 'leaflet'\nimport 'leaflet/dist/leaflet.css';\n\n\nclass Tuin extends Component {\n\n  leafletMap = null\n\n  constructor(props) {\n    super(props);\n\n    this.leafletMap = React.createRef();\n\n    this.state = {'ceremonie':[], 'ontvangst':[], 'receptie':[], 'position':{'coords': [51.98126,5.82501], 'zoom':18}}\n  }\n\n  componentDidMount() {\n  this.flyToPos(this.state.position)\n  this.getMarkers('ceremonie')\n  this.getMarkers('ontvangst')\n  this.getMarkers('receptie')\n\n  }\n\ncomponentWillUnmount(){\n  this.props.setPosition(this.state.position)\n\n}\n\n  showPhoto = async (imageId) => {\n  this.props.addOnScreen('foto')\n  this.props.setImageId(imageId)\n  }\n\n  openWindow = (url) => {\n    console.log(url)\n    var win = window.open('https://' + url, '_blank');\n    win.focus();\n  }\n\ngetMarkers= async (layer) =>{\n  let body = {'mapId':this.props.mapId, 'layer':layer, 'type':'polygon'}\n  let ids = await fetch('https://api.ellipsis-earth.com/v2/geometry/ids',{method:'POST',  headers: {'Content-Type': 'application/json', 'Authorization': this.props.token}, body:JSON.stringify(body)});\n  ids = await ids.json()\n  ids = ids.ids\n  body = {'mapId':this.props.mapId, 'elementIds':ids, 'type':'polygon'}\n  let geojson = await fetch('https://api.ellipsis-earth.com/v2/geometry/get',{method:'POST',  headers: {'Content-Type': 'application/json', 'Authorization': this.props.token}, body:JSON.stringify(body)});\n  geojson = await geojson.json()\n\n  let geoJsonElements = geojson.features.map((feature) => {\n    let position = feature.geometry.coordinates\n    position.reverse()\n    return (\n      <Marker map={this.refs.map} position={position} onClick= {this.openWindow.bind(this, feature.properties.link)} >\n         <Popup>\n           <span>{layer}</span>\n         </Popup>\n       </Marker>\n    );\n    this.setState({ceremonie:geoJsonElements})\n  });\n\n\n  if(layer == 'ceremonie'){\n    this.setState({ceremonie:geoJsonElements})\n  }\n  if(layer == 'ontvangst'){\n    this.setState({ontvangst:geoJsonElements})\n  }\n  if(layer == 'receptie'){\n    this.setState({receptie:geoJsonElements})\n  }\n\n}\n\n  flyToPos = async (pos) => {\n    let leafletElement = this.leafletMap.current.leafletElement\n    leafletElement.flyTo(pos.coords, pos.zoom, {'duration':6});\n  }\n\n\n\ncheckState = () => {\n  console.log('hoi')\n}\n\n  render(){\n    let fullStyle = { height: '1000px', width: '1000px' };\n    return(\n      <div style = {fullStyle}>\n      <input type='button' value = 'check state' onClick={this.checkState}/>\n      <Map center={this.props.position.coords} zoom={this.props.position.zoom} style={fullStyle} ref={this.leafletMap} maxNativeZoom={21} maxZoom={21}>\n      <Pane style = {{'zIndex':100}}>\n        <TileLayer\n          url='https://www.google.com/maps/vt?lyrs=y@189&x={x}&y={y}&z={z}'\n        />\n        </Pane>\n        <Pane style = {{'zIndex':150}}>\n          <TileLayer\n          url={'https://api.ellipsis-earth.com/v2/tileService/dd3cee74-98ec-4fd6-bd7a-7fdd3bb409d1/3/rgb/{z}/{x}/{y}?token=' + this.props.token.substring(7,this.props.token.length)}\n          />\n          </Pane>\n        <Pane style={{ zIndex: 200 }}>\n          {this.state.ceremonie}\n          {this.state.ontvangst}\n          {this.state.receptie}\n        </Pane>\n        </Map>\n      </div>\n    )\n  }\n\n};\nexport default Tuin;\n"]},"metadata":{},"sourceType":"module"}