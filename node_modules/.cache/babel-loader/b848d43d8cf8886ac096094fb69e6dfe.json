{"ast":null,"code":"var _jsxFileName = \"/home/daniel/Projecten/weddingApp/src/components/Tuin.js\";\nimport React, { Component } from 'react';\nimport { Map, TileLayer, Pane, Marker, Popup, Circle, GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n}); // const NEARBY_STYLE = {\n//   // color: '#b3ce8c',\n//   color: '#ff0000',\n//   weight: 2,\n//   fillOpacity: 0.2\n// };\n\nconst GEOMETRY_STYLES = {\n  field: {\n    color: '#b3ce8c',\n    // color: '#ffa500',\n    weight: 2,\n    fillOpacity: 0.4\n  },\n  nearbyField: {\n    // color: '#3388ff',\n    // color: '#ffa500',\n    weight: 2,\n    fillOpacity: 0.0\n  },\n  selectedNearbyField: {\n    color: '#66a6ff',\n    // color: '#ffa500',\n    weight: 2,\n    fillOpacity: 0.3\n  },\n  selectedField: {\n    color: '#4caeb1',\n    weight: 2,\n    fillOpacity: 0.2\n  },\n  accuracyCircle: {\n    color: '#3388ff',\n    weight: 2,\n    fillOpacity: 0.1\n  }\n};\n\nclass MainMap extends Component {\n  constructor(props) {\n    super(props);\n    this.leafletMap = null;\n\n    this.componentDidUpdate = prevProps => {\n      let oldPosition = prevProps.position;\n      let newPosition = this.props.position;\n\n      if (!oldPosition && newPosition) {\n        this.flyToPos(newPosition.coords);\n      } else if (prevProps.actionPaneMode !== AppUtility.actionPaneMode.postPhoto && this.props.actionPaneMode === AppUtility.actionPaneMode.postPhoto) {\n        this.flyToPos(newPosition.coords);\n      }\n\n      let geoJsons = this.props.geoJsons;\n\n      if (prevProps.geoJsons !== geoJsons) {\n        let geoJsonElements = geoJsons.map(feature => {\n          return /*#__PURE__*/React.createElement(GeoJSON, {\n            key: feature.properties.id,\n            data: feature,\n            style: this.props.actionPaneMode === AppUtility.actionPaneMode.postPhoto ? GEOMETRY_STYLES.nearbyField : GEOMETRY_STYLES.field,\n            onEachFeature: (feature, layer) => layer.on({\n              click: () => this.props.onFeatureClick(feature)\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 11\n            }\n          });\n        });\n        this.setState({\n          geoJsonElements: geoJsonElements\n        });\n      }\n\n      let selectedFeature = this.props.selectedFeature;\n\n      if (prevProps.selectedFeature !== selectedFeature) {\n        let selectedGeoJsonElement = null;\n\n        if (selectedFeature) {\n          selectedGeoJsonElement = /*#__PURE__*/React.createElement(GeoJSON, {\n            key: selectedFeature.properties.id + '-selected',\n            data: selectedFeature,\n            style: this.props.actionPaneMode === AppUtility.actionPaneMode.postPhoto ? GEOMETRY_STYLES.selectedNearbyField : GEOMETRY_STYLES.selectedField,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 11\n            }\n          });\n        }\n\n        this.setState({\n          selectedGeoJsonElement: selectedGeoJsonElement\n        });\n      }\n    };\n\n    this.flyToPos = (pos, zoom = 16) => {\n      let leafletElement = this.leafletMap.current.leafletElement;\n      leafletElement.flyTo(pos, zoom);\n    };\n\n    this.onLeafletViewportChanged = () => {\n      if (this.setNewViewportTimer) {\n        clearTimeout(this.setNewViewportTimer);\n      }\n\n      let cb = () => {\n        let screenBounds = this.leafletMap.current.leafletElement.getBounds();\n        let bounds = {\n          xMin: screenBounds.getWest(),\n          xMax: screenBounds.getEast(),\n          yMin: screenBounds.getSouth(),\n          yMax: screenBounds.getNorth()\n        };\n        this.props.onMapBoundsChange(bounds);\n      };\n\n      this.setNewViewportTimer = setTimeout(cb, 400);\n    };\n\n    this.leafletMap = React.createRef();\n    this.state = {\n      geoJsonElements: [],\n      selectedGeoJsonElement: null,\n      drawAccuracyCircle: false\n    };\n  }\n\n  componentDidMount() {\n    let leafletElement = this.leafletMap.current.leafletElement;\n    leafletElement.attributionControl.setPrefix(false);\n    let position = this.props.position;\n\n    if (position) {\n      setTimeout(() => this.setState({\n        drawAccuracyCircle: true\n      }), 5000);\n      this.flyToPos(position.coords);\n    }\n  }\n\n  render() {\n    let mapCenter = [52.09, 5.10]; // Utrecht\n\n    let fullStyle = {\n      height: '100%',\n      width: '100%'\n    };\n    let position = this.props.position;\n    let positionMarker = null;\n    let accuracyCircle = null;\n\n    if (position) {\n      positionMarker = /*#__PURE__*/React.createElement(Marker, {\n        position: position.coords,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Popup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      }, \"U bent hier\"));\n      accuracyCircle = /*#__PURE__*/React.createElement(Circle, Object.assign({\n        key: 'accuracy' + JSON.stringify(this.props.position),\n        center: position.coords,\n        radius: position.accuracy\n      }, GEOMETRY_STYLES.accuracyCircle, {\n        interactive: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: fullStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      ref: this.leafletMap,\n      center: mapCenter,\n      zoom: 7,\n      zoomSnap: 0.5,\n      zoomDelta: 0.5,\n      style: fullStyle,\n      zoomControl: false,\n      onViewportChanged: this.onLeafletViewportChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Pane, {\n      style: {\n        zIndex: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      key: \"base-layer\",\n      url: \"https://www.google.com/maps/vt?lyrs=y@189&x={x}&y={y}&z={z}\",\n      maxNativeZoom: 21,\n      maxZoom: 40,\n      noWrap: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Pane, {\n      style: {\n        zIndex: 150\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }\n    }, this.state.geoJsonElements, this.state.selectedGeoJsonElement), /*#__PURE__*/React.createElement(Pane, {\n      style: {\n        zIndex: 200\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }, this.state.drawAccuracyCircle ? accuracyCircle : null, positionMarker)));\n  }\n\n}\n\nexport default MainMap;","map":{"version":3,"sources":["/home/daniel/Projecten/weddingApp/src/components/Tuin.js"],"names":["React","Component","Map","TileLayer","Pane","Marker","Popup","Circle","GeoJSON","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","GEOMETRY_STYLES","field","color","weight","fillOpacity","nearbyField","selectedNearbyField","selectedField","accuracyCircle","MainMap","constructor","props","leafletMap","componentDidUpdate","prevProps","oldPosition","position","newPosition","flyToPos","coords","actionPaneMode","AppUtility","postPhoto","geoJsons","geoJsonElements","map","feature","properties","id","layer","on","click","onFeatureClick","setState","selectedFeature","selectedGeoJsonElement","pos","zoom","leafletElement","current","flyTo","onLeafletViewportChanged","setNewViewportTimer","clearTimeout","cb","screenBounds","getBounds","bounds","xMin","getWest","xMax","getEast","yMin","getSouth","yMax","getNorth","onMapBoundsChange","setTimeout","createRef","state","drawAccuracyCircle","componentDidMount","attributionControl","setPrefix","render","mapCenter","fullStyle","height","width","positionMarker","JSON","stringify","accuracy","zIndex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,GADF,EAEEC,SAFF,EAGEC,IAHF,EAIEC,MAJF,EAKEC,KALF,EAMEC,MANF,EAOEC,OAPF,QAQO,eARP;AASA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,0BAAP;AAGA,OAAOA,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeC,SAAf,CAAyBC,WAAhC;AAEAJ,CAAC,CAACC,IAAF,CAAOC,OAAP,CAAeG,YAAf,CAA4B;AACxBC,EAAAA,aAAa,EAAEC,OAAO,CAAC,wCAAD,CADE;AAExBC,EAAAA,OAAO,EAAED,OAAO,CAAC,qCAAD,CAFQ;AAGxBE,EAAAA,SAAS,EAAEF,OAAO,CAAC,uCAAD;AAHM,CAA5B,E,CAMA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,eAAe,GAAG;AACtBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,SADF;AAEL;AACAC,IAAAA,MAAM,EAAE,CAHH;AAILC,IAAAA,WAAW,EAAE;AAJR,GADe;AAOtBC,EAAAA,WAAW,EAAE;AACX;AACA;AACAF,IAAAA,MAAM,EAAE,CAHG;AAIXC,IAAAA,WAAW,EAAE;AAJF,GAPS;AAatBE,EAAAA,mBAAmB,EAAE;AACnBJ,IAAAA,KAAK,EAAE,SADY;AAEnB;AACAC,IAAAA,MAAM,EAAE,CAHW;AAInBC,IAAAA,WAAW,EAAE;AAJM,GAbC;AAmBtBG,EAAAA,aAAa,EAAE;AACbL,IAAAA,KAAK,EAAE,SADM;AAEbC,IAAAA,MAAM,EAAE,CAFK;AAGbC,IAAAA,WAAW,EAAE;AAHA,GAnBO;AAwBtBI,EAAAA,cAAc,EAAE;AACdN,IAAAA,KAAK,EAAE,SADO;AAEdC,IAAAA,MAAM,EAAE,CAFM;AAGdC,IAAAA,WAAW,EAAE;AAHC;AAxBM,CAAxB;;AA+BA,MAAMK,OAAN,SAAsB3B,SAAtB,CAAgC;AAG9B4B,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAFnBC,UAEmB,GAFN,IAEM;;AAAA,SAyBnBC,kBAzBmB,GAyBGC,SAAD,IAAe;AAClC,UAAIC,WAAW,GAAGD,SAAS,CAACE,QAA5B;AACA,UAAIC,WAAW,GAAG,KAAKN,KAAL,CAAWK,QAA7B;;AAEA,UAAI,CAACD,WAAD,IAAgBE,WAApB,EAAiC;AAC/B,aAAKC,QAAL,CAAcD,WAAW,CAACE,MAA1B;AACD,OAFD,MAGK,IAAIL,SAAS,CAACM,cAAV,KAA6BC,UAAU,CAACD,cAAX,CAA0BE,SAAvD,IACP,KAAKX,KAAL,CAAWS,cAAX,KAA8BC,UAAU,CAACD,cAAX,CAA0BE,SADrD,EACgE;AACnE,aAAKJ,QAAL,CAAcD,WAAW,CAACE,MAA1B;AACD;;AAED,UAAII,QAAQ,GAAG,KAAKZ,KAAL,CAAWY,QAA1B;;AACA,UAAIT,SAAS,CAACS,QAAV,KAAuBA,QAA3B,EAAqC;AACnC,YAAIC,eAAe,GAAGD,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;AAC9C,8BACE,oBAAC,OAAD;AACE,YAAA,GAAG,EAAEA,OAAO,CAACC,UAAR,CAAmBC,EAD1B;AAEE,YAAA,IAAI,EAAEF,OAFR;AAGE,YAAA,KAAK,EAAE,KAAKf,KAAL,CAAWS,cAAX,KAA8BC,UAAU,CAACD,cAAX,CAA0BE,SAAxD,GACLtB,eAAe,CAACK,WADX,GACyBL,eAAe,CAACC,KAJlD;AAKE,YAAA,aAAa,EAAE,CAACyB,OAAD,EAAUG,KAAV,KAAoBA,KAAK,CAACC,EAAN,CAAS;AAAEC,cAAAA,KAAK,EAAE,MAAM,KAAKpB,KAAL,CAAWqB,cAAX,CAA0BN,OAA1B;AAAf,aAAT,CALrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD,SAVqB,CAAtB;AAYA,aAAKO,QAAL,CAAc;AAAET,UAAAA,eAAe,EAAEA;AAAnB,SAAd;AACD;;AAED,UAAIU,eAAe,GAAG,KAAKvB,KAAL,CAAWuB,eAAjC;;AAEA,UAAIpB,SAAS,CAACoB,eAAV,KAA8BA,eAAlC,EAAmD;AACjD,YAAIC,sBAAsB,GAAG,IAA7B;;AAEA,YAAID,eAAJ,EAAqB;AACnBC,UAAAA,sBAAsB,gBACpB,oBAAC,OAAD;AACE,YAAA,GAAG,EAAED,eAAe,CAACP,UAAhB,CAA2BC,EAA3B,GAAgC,WADvC;AAEE,YAAA,IAAI,EAAEM,eAFR;AAGE,YAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWS,cAAX,KAA8BC,UAAU,CAACD,cAAX,CAA0BE,SAAxD,GACLtB,eAAe,CAACM,mBADX,GACiCN,eAAe,CAACO,aAJ1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAED,aAAK0B,QAAL,CAAc;AAAEE,UAAAA,sBAAsB,EAAEA;AAA1B,SAAd;AACD;AACF,KAxEkB;;AAAA,SA0EnBjB,QA1EmB,GA0ER,CAACkB,GAAD,EAAMC,IAAI,GAAG,EAAb,KAAoB;AAC7B,UAAIC,cAAc,GAAG,KAAK1B,UAAL,CAAgB2B,OAAhB,CAAwBD,cAA7C;AACAA,MAAAA,cAAc,CAACE,KAAf,CAAqBJ,GAArB,EAA0BC,IAA1B;AACD,KA7EkB;;AAAA,SA+EnBI,wBA/EmB,GA+EQ,MAAM;AAC/B,UAAI,KAAKC,mBAAT,EAA8B;AAC5BC,QAAAA,YAAY,CAAC,KAAKD,mBAAN,CAAZ;AACD;;AAED,UAAIE,EAAE,GAAG,MAAM;AACb,YAAIC,YAAY,GAAG,KAAKjC,UAAL,CAAgB2B,OAAhB,CAAwBD,cAAxB,CAAuCQ,SAAvC,EAAnB;AACA,YAAIC,MAAM,GAAG;AACXC,UAAAA,IAAI,EAAEH,YAAY,CAACI,OAAb,EADK;AAEXC,UAAAA,IAAI,EAAEL,YAAY,CAACM,OAAb,EAFK;AAGXC,UAAAA,IAAI,EAAEP,YAAY,CAACQ,QAAb,EAHK;AAIXC,UAAAA,IAAI,EAAET,YAAY,CAACU,QAAb;AAJK,SAAb;AAOA,aAAK5C,KAAL,CAAW6C,iBAAX,CAA6BT,MAA7B;AACD,OAVD;;AAYA,WAAKL,mBAAL,GAA2Be,UAAU,CAACb,EAAD,EAAK,GAAL,CAArC;AACD,KAjGkB;;AAGjB,SAAKhC,UAAL,GAAkB/B,KAAK,CAAC6E,SAAN,EAAlB;AAEA,SAAKC,KAAL,GAAa;AACXnC,MAAAA,eAAe,EAAE,EADN;AAEXW,MAAAA,sBAAsB,EAAE,IAFb;AAIXyB,MAAAA,kBAAkB,EAAE;AAJT,KAAb;AAMD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAIvB,cAAc,GAAG,KAAK1B,UAAL,CAAgB2B,OAAhB,CAAwBD,cAA7C;AAEAA,IAAAA,cAAc,CAACwB,kBAAf,CAAkCC,SAAlC,CAA4C,KAA5C;AAEA,QAAI/C,QAAQ,GAAG,KAAKL,KAAL,CAAWK,QAA1B;;AACA,QAAIA,QAAJ,EAAc;AACZyC,MAAAA,UAAU,CAAC,MAAM,KAAKxB,QAAL,CAAc;AAAE2B,QAAAA,kBAAkB,EAAE;AAAtB,OAAd,CAAP,EAAoD,IAApD,CAAV;AACA,WAAK1C,QAAL,CAAcF,QAAQ,CAACG,MAAvB;AACD;AACF;;AA4ED6C,EAAAA,MAAM,GAAG;AACP,QAAIC,SAAS,GAAG,CAAC,KAAD,EAAQ,IAAR,CAAhB,CADO,CACwB;;AAE/B,QAAIC,SAAS,GAAG;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAAhB;AAEA,QAAIpD,QAAQ,GAAG,KAAKL,KAAL,CAAWK,QAA1B;AACA,QAAIqD,cAAc,GAAG,IAArB;AACA,QAAI7D,cAAc,GAAG,IAArB;;AACA,QAAIQ,QAAJ,EAAc;AACZqD,MAAAA,cAAc,gBACZ,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAErD,QAAQ,CAACG,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF;AAMAX,MAAAA,cAAc,gBACZ,oBAAC,MAAD;AACE,QAAA,GAAG,EAAE,aAAa8D,IAAI,CAACC,SAAL,CAAe,KAAK5D,KAAL,CAAWK,QAA1B,CADpB;AAEE,QAAA,MAAM,EAAEA,QAAQ,CAACG,MAFnB;AAGE,QAAA,MAAM,EAAEH,QAAQ,CAACwD;AAHnB,SAIMxE,eAAe,CAACQ,cAJtB;AAKE,QAAA,WAAW,EAAE,KALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AASD;;AAED,wBACE;AAAK,MAAA,KAAK,EAAE0D,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AACE,MAAA,GAAG,EAAE,KAAKtD,UADZ;AAEE,MAAA,MAAM,EAAEqD,SAFV;AAGE,MAAA,IAAI,EAAE,CAHR;AAIE,MAAA,QAAQ,EAAE,GAJZ;AAKE,MAAA,SAAS,EAAE,GALb;AAME,MAAA,KAAK,EAAEC,SANT;AAOE,MAAA,WAAW,EAAE,KAPf;AAQE,MAAA,iBAAiB,EAAE,KAAKzB,wBAR1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEgC,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,GAAG,EAAC,YADN;AAEE,MAAA,GAAG,EAAC,6DAFN;AAGE,MAAA,aAAa,EAAE,EAHjB;AAIE,MAAA,OAAO,EAAE,EAJX;AAKE,MAAA,MAAM,MALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,eAmBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEA,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKd,KAAL,CAAWnC,eADd,EAEG,KAAKmC,KAAL,CAAWxB,sBAFd,CAnBF,eAuBE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEsC,QAAAA,MAAM,EAAE;AAAV,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKd,KAAL,CAAWC,kBAAX,GAAgCpD,cAAhC,GAAiD,IADpD,EAEG6D,cAFH,CAvBF,CADF,CADF;AAiCD;;AAjK6B;;AAqKhC,eAAe5D,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Map,\n  TileLayer,\n  Pane,\n  Marker,\n  Popup,\n  Circle,\n  GeoJSON\n} from 'react-leaflet';\nimport L from 'leaflet'\nimport 'leaflet/dist/leaflet.css';\n\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n// const NEARBY_STYLE = {\n//   // color: '#b3ce8c',\n//   color: '#ff0000',\n//   weight: 2,\n//   fillOpacity: 0.2\n// };\n\nconst GEOMETRY_STYLES = {\n  field: {\n    color: '#b3ce8c',\n    // color: '#ffa500',\n    weight: 2,\n    fillOpacity: 0.4\n  },\n  nearbyField: {\n    // color: '#3388ff',\n    // color: '#ffa500',\n    weight: 2,\n    fillOpacity: 0.0\n  },\n  selectedNearbyField: {\n    color: '#66a6ff',\n    // color: '#ffa500',\n    weight: 2,\n    fillOpacity: 0.3\n  },\n  selectedField: {\n    color: '#4caeb1',\n    weight: 2,\n    fillOpacity: 0.2\n  },\n  accuracyCircle: {\n    color: '#3388ff',\n    weight: 2,\n    fillOpacity: 0.1\n  }\n}\n\nclass MainMap extends Component {\n  leafletMap = null\n\n  constructor(props) {\n    super(props);\n\n    this.leafletMap = React.createRef();\n\n    this.state = {\n      geoJsonElements: [],\n      selectedGeoJsonElement: null,\n\n      drawAccuracyCircle: false\n    }\n  }\n\n  componentDidMount() {\n    let leafletElement = this.leafletMap.current.leafletElement;\n\n    leafletElement.attributionControl.setPrefix(false);\n\n    let position = this.props.position;\n    if (position) {\n      setTimeout(() => this.setState({ drawAccuracyCircle: true }), 5000);\n      this.flyToPos(position.coords);\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    let oldPosition = prevProps.position;\n    let newPosition = this.props.position;\n\n    if (!oldPosition && newPosition) {\n      this.flyToPos(newPosition.coords);\n    }\n    else if (prevProps.actionPaneMode !== AppUtility.actionPaneMode.postPhoto &&\n      this.props.actionPaneMode === AppUtility.actionPaneMode.postPhoto) {\n      this.flyToPos(newPosition.coords);\n    }\n\n    let geoJsons = this.props.geoJsons;\n    if (prevProps.geoJsons !== geoJsons) {\n      let geoJsonElements = geoJsons.map((feature) => {\n        return (\n          <GeoJSON\n            key={feature.properties.id}\n            data={feature}\n            style={this.props.actionPaneMode === AppUtility.actionPaneMode.postPhoto ?\n              GEOMETRY_STYLES.nearbyField : GEOMETRY_STYLES.field}\n            onEachFeature={(feature, layer) => layer.on({ click: () => this.props.onFeatureClick(feature) })}\n          />\n        );\n      });\n\n      this.setState({ geoJsonElements: geoJsonElements });\n    }\n\n    let selectedFeature = this.props.selectedFeature;\n\n    if (prevProps.selectedFeature !== selectedFeature) {\n      let selectedGeoJsonElement = null;\n\n      if (selectedFeature) {\n        selectedGeoJsonElement = (\n          <GeoJSON\n            key={selectedFeature.properties.id + '-selected'}\n            data={selectedFeature}\n            style={this.props.actionPaneMode === AppUtility.actionPaneMode.postPhoto ?\n              GEOMETRY_STYLES.selectedNearbyField : GEOMETRY_STYLES.selectedField}\n          />\n        );\n      }\n\n      this.setState({ selectedGeoJsonElement: selectedGeoJsonElement });\n    }\n  }\n\n  flyToPos = (pos, zoom = 16) => {\n    let leafletElement = this.leafletMap.current.leafletElement\n    leafletElement.flyTo(pos, zoom);\n  }\n\n  onLeafletViewportChanged = () => {\n    if (this.setNewViewportTimer) {\n      clearTimeout(this.setNewViewportTimer);\n    }\n\n    let cb = () => {\n      let screenBounds = this.leafletMap.current.leafletElement.getBounds();\n      let bounds = {\n        xMin: screenBounds.getWest(),\n        xMax: screenBounds.getEast(),\n        yMin: screenBounds.getSouth(),\n        yMax: screenBounds.getNorth()\n      };\n\n      this.props.onMapBoundsChange(bounds);\n    };\n\n    this.setNewViewportTimer = setTimeout(cb, 400);\n  }\n\n  render() {\n    let mapCenter = [52.09, 5.10]; // Utrecht\n\n    let fullStyle = { height: '100%', width: '100%' };\n\n    let position = this.props.position;\n    let positionMarker = null;\n    let accuracyCircle = null;\n    if (position) {\n      positionMarker = (\n        <Marker position={position.coords}>\n          <Popup>U bent hier</Popup>\n        </Marker>\n      );\n\n      accuracyCircle = (\n        <Circle\n          key={'accuracy' + JSON.stringify(this.props.position)}\n          center={position.coords}\n          radius={position.accuracy}\n          {...GEOMETRY_STYLES.accuracyCircle}\n          interactive={false}\n        />\n      );\n    }\n\n    return (\n      <div style={fullStyle}>\n        <Map\n          ref={this.leafletMap}\n          center={mapCenter}\n          zoom={7}\n          zoomSnap={0.5}\n          zoomDelta={0.5}\n          style={fullStyle}\n          zoomControl={false}\n          onViewportChanged={this.onLeafletViewportChanged}\n        >\n          <Pane style={{ zIndex: 100 }}>\n            <TileLayer\n              key='base-layer'\n              url='https://www.google.com/maps/vt?lyrs=y@189&x={x}&y={y}&z={z}'\n              maxNativeZoom={21}\n              maxZoom={40}\n              noWrap\n            />\n          </Pane>\n          <Pane style={{ zIndex: 150 }}>\n            {this.state.geoJsonElements}\n            {this.state.selectedGeoJsonElement}\n          </Pane>\n          <Pane style={{ zIndex: 200 }}>\n            {this.state.drawAccuracyCircle ? accuracyCircle : null}\n            {positionMarker}\n            {/* {nearbyGeometry} */}\n          </Pane>\n        </Map>\n      </div>\n    )\n  }\n}\n\n\nexport default MainMap;\n"]},"metadata":{},"sourceType":"module"}